package edu.pnu.service.member;

import java.util.List;

import org.springframework.stereotype.Service;

import edu.pnu.domain.GoodsOption;
import edu.pnu.domain.Member;
import edu.pnu.domain.OrderAddress;
import edu.pnu.domain.OrderItem;
import edu.pnu.domain.OrderList;
import edu.pnu.dto.Orders.OrderItemDTO;
import edu.pnu.dto.Orders.OrderListDTO;
import edu.pnu.persistence.GoodsOptionRepository;
import edu.pnu.persistence.OrderAddressRepository;
import edu.pnu.persistence.OrderListRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class OrderService {
    private final OrderListRepository orderListRepo;
    private final GoodsOptionRepository goodsOptionRepo;
    private final OrderAddressRepository orderAddressRepo;

    @Transactional
    public OrderList createOrder(Member member, List<OrderItemDTO> itemDTOs, OrderListDTO orderListDTO) {
       
    	System.out.println("[ÏßÑÏûÖ] : [OrderService] Ï£ºÎ¨∏ ÎÇ¥Ïó≠ ÏÉùÏÑ±");
    	
    	 // 1. Î∞∞ÏÜ°ÏßÄ ÏóîÌã∞Ìã∞ Ï°∞Ìöå (Ï∂îÍ∞ÄÌï¥Ïïº ÏûëÎèôÎê®)
    	OrderAddress address;

    	if (orderListDTO.getAddressId() != null) {
    	    // üîπ Ï†ÄÏû•Îêú Ï£ºÏÜå ÏÇ¨Ïö©
    	    address = orderAddressRepo.findById(orderListDTO.getAddressId())
    	        .orElseThrow(() -> new IllegalArgumentException("Ï£ºÏÜå ÏóÜÏùå"));
    	} else {
    	    // ÏÉà Ï£ºÏÜå ÏûÖÎ†•Ïãú ÏÇ¨Ïö©
    	    address = OrderAddress.builder()
    	        .zip(orderListDTO.getZip())
    	        .address1(orderListDTO.getAddress1())
    	        .address2(orderListDTO.getAddress2())
    	        .phone(orderListDTO.getPhone())
    	        .member(member)
    	        .build();
    	    
    	    orderAddressRepo.save(address); // ÏÉà Ï£ºÏÜå Ï†ÄÏû•
    	}
    	
        
    	 // 2. Ï£ºÎ¨∏ ÏÉùÏÑ±
        OrderList order = OrderList.builder()
            .member(member)
            .orderstatus(orderListDTO.getOrderstatus() != null ? orderListDTO.getOrderstatus() : "Ï£ºÎ¨∏ÏôÑÎ£å")
            .total(orderListDTO.getTotal())
            .payment(orderListDTO.getPayment())
            .address(address)
            .build();

        
        
        // 3. Ï£ºÎ¨∏ ÏÉÅÏÑ∏ Ìï≠Î™© Ï≤òÎ¶¨ + Ïû¨Í≥† Ï∞®Í∞ê
        for (OrderItemDTO itemDTO : itemDTOs) {
            GoodsOption option = goodsOptionRepo.findById(itemDTO.getOptionid())
                .orElseThrow(() -> new IllegalArgumentException("ÏòµÏÖò ÏóÜÏùå: " + itemDTO.getOptionid()));

            if (option.getStock() < itemDTO.getQuantity()) {
                throw new IllegalArgumentException("Ïû¨Í≥† Î∂ÄÏ°±: " + itemDTO.getOptionid());
            }

            option.setStock(option.getStock() - itemDTO.getQuantity());

            OrderItem orderItem = OrderItem.builder()
                .orderList(order)
                .goodsOption(option)
                .quantity(itemDTO.getQuantity())
                .price(itemDTO.getPrice())
                .build();

            order.getItems().add(orderItem);
        }

        // 4. ÏµúÏ¢Ö Ï£ºÎ¨∏ Ï†ÄÏû•
        orderListRepo.save(order);
        System.out.println("[ÏÑ±Í≥µ] : Ï£ºÎ¨∏ Ï†ÄÏû• ÏôÑÎ£å");
        return order;
    }
}
